generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  memberships  Membership[]
  userRoles    UserRole[]
}

model Organization {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
}

model Membership {
  id             String        @id @default(cuid())
  userId         String
  organizationId String
  role           String        @default("member")
  user           User          @relation(fields: [userId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])
  createdAt      DateTime      @default(now())
  @@unique([userId, organizationId])
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  userRoles   UserRole[]
  rolePerms   RolePermission[]
}

model Permission {
  id          String           @id @default(cuid())
  code        String           @unique
  description String?
  rolePerms   RolePermission[]
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
  @@unique([userId, roleId])
}

model RolePermission {
  id           String      @id @default(cuid())
  roleId       String
  permissionId String
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])
  @@unique([roleId, permissionId])
}

model RefreshToken {
  id              String    @id @default(cuid())
  tokenHash       String    @unique
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  expiresAt       DateTime
  revokedAt       DateTime?
  replacedById    String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@index([userId])
  @@index([expiresAt])
}
